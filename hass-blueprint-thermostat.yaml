blueprint:
  name: "🏰 Automatic HVAC Control - Window / Temperature Controlled"
  description: >
    Turns off the HVAC when a window or door is opened (binary sensor 'on'), with optional notifications for high humidity, low pressure, and temperature.
    Restores climate state when windows are closed (binary sensor 'off').
    Starts a timer before turning off the HVAC for energy-saving purposes.
  domain: automation
  input:
    climate_entity:
      name: Climate Entity
      description: >
        Select the HVAC system entity to manage (e.g., air conditioning or heating).
      selector:
        entity:
          domain: climate
    window_sensors:
      name: Window/Door Sensors
      description: >
        The sensors that detect open windows or doors.
      selector:
        entity:
          domain: binary_sensor
          multiple: true
    temperature_sensor:
      name: Outside Temperature Sensor
      description: >
        Optional sensor for measuring outdoor temperature.
      selector:
        entity:
          domain: sensor
          device_class: temperature
      default: ""
    humidity_sensor:
      name: Outside Humidity Sensor
      description: >
        Optional sensor for measuring outdoor humidity.
      selector:
        entity:
          domain: sensor
          device_class: humidity
      default: ""
    pressure_sensor:
      name: Atmospheric Pressure Sensor
      description: >
        Optional sensor for measuring atmospheric pressure.
      selector:
        entity:
          domain: sensor
          device_class: atmospheric_pressure
      default: ""
    humidity_threshold:
      name: Humidity Threshold
      description: >
        Threshold for high humidity notifications.
      default: 60
      selector:
        number:
          min: 0
          max: 100
          unit_of_measurement: "%"
          step: 1
    pressure_threshold:
      name: Pressure Threshold
      description: >
        Threshold for low pressure notifications.
      default: 1000
      selector:
        number:
          min: 900
          max: 1050
          unit_of_measurement: "hPa"
          step: 1
    notify_device:
      name: Notify Device
      description: >
        Device to send notifications to.
      selector:
        device:
          integration: mobile_app
    window_open_timer:
      name: Timer for Window Open Notification
      description: >
        Select the timer to use when a window is opened.
      selector:
        entity:
          domain: timer
    temp_high_threshold:
      name: High Temperature Threshold
      description: >
        Temperature threshold above which HVAC will be turned off immediately when windows are opened (optional).
      default: 25
      selector:
        number:
          min: 15
          max: 40
          unit_of_measurement: "°C"
          step: 0.5
    temp_low_threshold:
      name: Low Temperature Threshold
      description: >
        Temperature threshold below which HVAC will be turned off immediately when windows are opened (optional).
      default: 15
      selector:
        number:
          min: -5
          max: 20
          unit_of_measurement: "°C"
          step: 0.5
    daytime_hvac_timeout:
      name: Daytime HVAC Off Timeout
      description: >
        How long to wait before turning off the HVAC during the day (e.g., 6:00-22:00).
      selector:
        duration:
          enable_day: false
    nighttime_hvac_timeout:
      name: Nighttime HVAC Off Timeout
      description: >
        How long to wait before turning off the HVAC during the night (e.g., 22:00-6:00).
      selector:
        duration:
          enable_day: false
    night_check_time:
      name: Nighttime Check Time
      description: >
        Time to check if any windows are still open before night (format: HH:MM).
      selector:
        time:
    night_start_time:
      name: Night Period Start
      description: >
        When the night period starts (format: HH:MM).
      selector:
        time:
    night_end_time:
      name: Night Period End
      description: >
        When the night period ends (format: HH:MM).
      selector:
        time:
    require_temperature_sensor:
      name: Require Temperature Sensor
      description: If enabled, automation will not run without a valid temperature sensor
      default: false
      selector:
        boolean:
    debug_mode:
      name: Debug Mode
      description: Enable additional logging for troubleshooting
      default: false
      selector:
        boolean:
    restore_climate_state:
      name: Remember Previous Climate State
      description: Restore the previous HVAC mode instead of always using auto
      default: true
      selector:
        boolean:
    seasonal_mode:
      name: Seasonal Mode
      description: Adjust behavior based on season
      default: auto
      selector:
        select:
          options:
            - auto
            - summer
            - winter
    notification_cooldown:
      name: Notification Cooldown
      description: Minimum time (in minutes) between notifications
      default: 5
      selector:
        number:
          min: 1
          max: 60
          unit_of_measurement: "min"

variables:
  humidity_sensor: !input humidity_sensor
  pressure_sensor: !input pressure_sensor
  temperature_sensor: !input temperature_sensor
  humidity_threshold: !input humidity_threshold
  pressure_threshold: !input pressure_threshold
  window_open_timer: !input window_open_timer
  window_sensors: !input window_sensors
  night_check_time: !input night_check_time
  night_start_time: !input night_start_time
  night_end_time: !input night_end_time
  daytime_hvac_timeout: !input daytime_hvac_timeout
  nighttime_hvac_timeout: !input nighttime_hvac_timeout
  temp_sensor_available: >
    {% set sensor = temperature_sensor %}
    {{ sensor | length > 0 and 
       states(sensor) not in ['unknown', 'unavailable'] and 
       states(sensor) | float(-1000) > -999 }}

  any_window_open: >
    {% for sensor in window_sensors %}
      {% if is_state(sensor, 'on') %}
        {{ true }}
        {% break %}
      {% endif %}
    {% endfor %}
    {{ false }}

  is_night_time: >
    {% set current_hour = now().hour %}
    {% set night_start = night_start_time.split(':')[0] | int %}
    {% set night_end = night_end_time.split(':')[0] | int %}
    {{ current_hour >= night_start or current_hour < night_end }}

  last_notification_key: "last_notification_{{trigger.entity_id}}"

  # Add a helper variable to get window names
  open_windows: >
    {% set names = [] %}
    {% for sensor in window_sensors %}
      {% if is_state(sensor, 'on') %}
        {% set name = state_attr(sensor, 'friendly_name') or area_name(sensor) or 'Unknown window' %}
        {% set names = names + [name] %}
      {% endif %}
    {% endfor %}
    {{ names | join(', ') }}

  closed_window: >
    {% if trigger.entity_id is defined %}
      {{ state_attr(trigger.entity_id, 'friendly_name') or area_name(trigger.entity_id) or 'Unknown window' }}
    {% else %}
      'Unknown window'
    {% endif %}

trigger:
  - platform: state
    entity_id: !input window_sensors
    from: "off"
    to: "on"
  - platform: state
    entity_id: !input window_sensors
    from: "on"
    to: "off"
  - platform: event
    event_type: timer.finished
    event_data:
      entity_id: !input window_open_timer
  - platform: time
    at: !input night_check_time

condition: []

action:
  - choose:
      - conditions:
          # Add immediate HVAC shutdown based on temperature
          - condition: or
            conditions:
              - condition: numeric_state
                entity_id: !input temperature_sensor
                above: !input temp_high_threshold
              - condition: numeric_state
                entity_id: !input temperature_sensor
                below: !input temp_low_threshold
          # Add check for active timer
          - condition: or
            conditions:
              - condition: state
                entity_id: !input window_open_timer
                state: "idle"
              - condition: template
                value_template: >
                  {% if trigger is defined and trigger.event is defined %}
                    {{ trigger.event.event_type == 'timer.finished' }}
                  {% else %}
                    false
                  {% endif %}
        sequence:
          - service: climate.turn_off
            target:
              entity_id: !input climate_entity
          # Check if this is a state change to "on" or an event that is not "timer.finished"
          - condition: template
            value_template: "{{ (trigger.to_state.state == 'on') or (trigger.event is defined and trigger.event.event_type != 'timer.finished') }}"
          - condition: state
            entity_id: !input window_sensors
            state: "on"
          - condition: state
            entity_id: !input window_open_timer
            state: "idle"
          - service: timer.start
            target:
              entity_id: !input window_open_timer
          - device_id: !input notify_device
            domain: mobile_app
            type: notify
            message: >
              🚪 The window or door in {{ area_name(window_sensors[0]) | default('an unknown area') }} has been opened.
              The current outside temperature is {{ states(temperature_sensor) | float }}°C.
              {% if states(temperature_sensor) | float < 15 %}
              Please close it within {{ (state_attr(window_open_timer, 'duration').split(':')[1] | int) }}
              minute{{ 's' if (state_attr(window_open_timer, 'duration').split(':')[1] | int) > 1 else '' }} to conserve energy.
              {% endif %}
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ humidity_sensor | length > 0 }}"
                  - condition: numeric_state
                    entity_id: !input humidity_sensor
                    above: !input humidity_threshold
                sequence:
                  - device_id: !input notify_device
                    domain: mobile_app
                    type: notify
                    message: >
                      💧 The humidity outside is currently {{ states(humidity_sensor) | float }}%, which is above the {{ humidity_threshold }}% threshold.
                      Please be cautious about increased humidity levels.
              - conditions:
                  - condition: template
                    value_template: "{{ humidity_sensor | length == 0 }}"
                sequence:
                  - device_id: !input notify_device
                    domain: mobile_app
                    type: notify
                    message: >
                      ℹ️ No humidity sensor data available. Skipping humidity-related notifications.

              - conditions:
                  - condition: template
                    value_template: "{{ pressure_sensor | length > 0 }}"
                  - condition: numeric_state
                    entity_id: !input pressure_sensor
                    below: !input pressure_threshold
                sequence:
                  - device_id: !input notify_device
                    domain: mobile_app
                    type: notify
                    message: >
                      🌧️ The atmospheric pressure outside is currently {{ states(pressure_sensor) | float }} hPa, below the {{ pressure_threshold }} hPa threshold.
                      This may indicate potential bad weather. Please be cautious.
              - conditions:
                  - condition: template
                    value_template: "{{ pressure_sensor | length == 0 }}"
                sequence:
                  - device_id: !input notify_device
                    domain: mobile_app
                    type: notify
                    message: >
                      ℹ️ No pressure sensor data available. Skipping pressure-related notifications.

          - choose:
              - conditions:
                  - condition: time
                    after: !input night_end_time
                    before: !input night_start_time
                sequence:
                  - delay: !input daytime_hvac_timeout
              - conditions:
                  - condition: time
                    after: !input night_start_time
                    before: !input night_end_time
                sequence:
                  - delay: !input nighttime_hvac_timeout
          
          - condition: state
            entity_id: !input window_sensors
            state: "on"
          - service: climate.turn_off
            target:
              entity_id: !input climate_entity
          - device_id: !input notify_device
            domain: mobile_app
            type: notify
            message: >
              ⏱️ The {{ area_name(trigger.entity_id) | default('window or door') }} has remained open for the timeout period
              {% if now().hour >= (night_start_time.split(':')[0] | int) or now().hour < (night_end_time.split(':')[0] | int) %}
              during nighttime (
              {%- if nighttime_hvac_timeout.seconds // 60 > 0 -%}
                {{ nighttime_hvac_timeout.seconds // 60 }} minute{{'s' if nighttime_hvac_timeout.seconds // 60 > 1 else ''}}
              {%- else -%}
                {{ nighttime_hvac_timeout.seconds % 60 }} second{{'s' if nighttime_hvac_timeout.seconds % 60 > 1 else ''}}
              {%- endif -%})
              {% else %}
              during daytime (
              {%- if daytime_hvac_timeout.seconds // 60 > 0 -%}
                {{ daytime_hvac_timeout.seconds // 60 }} minute{{'s' if daytime_hvac_timeout.seconds // 60 > 1 else ''}}
              {%- else -%}
                {{ daytime_hvac_timeout.seconds % 60 }} second{{'s' if daytime_hvac_timeout.seconds % 60 > 1 else ''}}
              {%- endif -%})
              {% endif %}.
              The HVAC system has been turned off for energy conservation.

      # When the window is closed, cancel the timer and restore the HVAC
      - conditions:
          - condition: template
            value_template: >
              {{ trigger.platform == 'state' and trigger.to_state.state == 'off' }}
          # Remove the climate state condition as it's preventing restoration
        sequence:
          - service: timer.cancel
            target:
              entity_id: !input window_open_timer
          # Only restore climate if all windows are closed
          - if:
              condition: template
              value_template: "{{ not any_window_open }}"
            then:
              - service: climate.set_hvac_mode
                target:
                  entity_id: !input climate_entity
                data:
                  hvac_mode: "auto"
          - device_id: !input notify_device
            domain: mobile_app
            type: notify
            message: >
              ✅ {{ closed_window }} has been closed.
              {% if not any_window_open %}
              All windows are now closed. The HVAC system has been restored to auto mode.
              {% else %}
              The following windows are still open: {{ open_windows }}
              {% endif %}

  - choose:
      # Notification specifically when the timer finishes, and the window remains open
      - conditions:
          - condition: template
            value_template: >
              {% if trigger is defined and trigger.event is defined %}
                {{ trigger.event.event_type == 'timer.finished' }}
              {% else %}
                false
              {% endif %}
          - condition: state
            entity_id: !input window_sensors
            state: "on"
        sequence:
          - choose:
              # Only notify if outside temperature data is available and below 15°C
              - conditions:
                  - condition: template
                    value_template: "{{ temperature_sensor | length > 0 }}"
                  - condition: numeric_state
                    entity_id: !input temperature_sensor
                    below: 15
                sequence:
                  - device_id: !input notify_device
                    domain: mobile_app
                    type: notify
                    message: >
                      🥶 Reminder: The window or door in {{ area_name(window_sensors[0]) | default('an unknown area') }} has been open for {{
                        state_attr(window_open_timer, 'duration').split(':')[1] | int
                      }} minutes. The outside temperature is below 15°C. Please check your windows.
              # Fallback if no temperature data is available
              - conditions:
                  - condition: template
                    value_template: "{{ temperature_sensor | length == 0 }}"
                sequence:
                  - device_id: !input notify_device
                    domain: mobile_app
                    type: notify
                    message: >
                      ⏱️ Reminder: The window or door in {{ area_name(window_sensors[0]) | default('an unknown area') }} has been open for {{
                        state_attr(window_open_timer, 'duration').split(':')[1] | int
                      }} minutes. Please close it to conserve energy.

      - conditions:
          - condition: template
            value_template: "{{ trigger.platform == 'time' }}"
          - condition: state
            entity_id: !input window_sensors
            state: "on"
        sequence:
          - device_id: !input notify_device
            domain: mobile_app
            type: notify
            message: >
              🌙 Night Check: A window or door in {{ area_name(window_sensors[0]) | default('your home') }} is still open.
              Please close it before going to bed (night period starts at {{ night_start_time }}).
              Current outside temperature: {{ states(temperature_sensor) | float }}°C.
